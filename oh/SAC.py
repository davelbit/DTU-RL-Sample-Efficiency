import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import gym


from gym import wrappers

env = gym.make('CartPole-v0') # Create environment

s = env.reset()
a = env.action_space.sample()
print('sample state:', s)
print('sample action:', a )

# Hyperparameters
action_dim = env.action_space.shape[0]
state_dim  = env.observation_space.shape[0]
hidden_dim = 256

print('state shape:', state_dim)
print('action shape:', action_dim)

learning_rate = 3e-4 # you know this by now
optimizer = optim.Adam(nn.parameters(), lr=learning_rate)
discount_factor = 0.99 # reward discount factor (gamma), 1.0 = no discount
replay_buffer = 10**6
n_hidden_layer = 2
n_hidden = 256
target_smoothing = 5e-3
val_freq = 50 # validation frequency

def show_replay():
    """
    Not-so-elegant way to display the MP4 file generated by the Monitor wrapper inside a notebook.
    The Monitor wrapper dumps the replay to a local file that we then display as a HTML video object.
    """
    import io
    import base64
    from IPython.display import HTML
    video = io.open('./gym-results/openaigym.video.%s.video000000.mp4' % env.file_infix, 'r+b').read()
    encoded = base64.b64encode(video)
    return HTML(data='''
        <video width="360" height="auto" alt="test" controls><source src="data:video/mp4;base64,{0}" type="video/mp4" /></video>'''
    .format(encoded.decode('ascii')))


def get_variable(x):
    """ Converts tensors to cuda, if available. """
    if torch.cuda.is_available():
        return x.cuda()
    return x

def get_numpy(x):
    """ Get numpy array for both cuda and not. """
    if torch.cuda.is_available():
        return x.cpu().data.numpy()
    return x.data.numpy()


"""import gym
env = gym.make("Taxi-v3")
observation = env.reset()
for _ in range(1000):
  env.render()
  action = env.action_space.sample() # your agent here (this takes random actions)
  observation, reward, done, info = env.step(action)"""

